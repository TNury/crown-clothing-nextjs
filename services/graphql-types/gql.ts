/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "mutation createCustomer($email: String!, $password: String!, $firstName: String!, $lastName: String!) {\n  customerCreate(\n    input: {email: $email, password: $password, firstName: $firstName, lastName: $lastName}\n  ) {\n    userErrors {\n      message\n    }\n    customer {\n      id\n      email\n      firstName\n      lastName\n    }\n  }\n}\n\nmutation createAccessToken($email: String!, $password: String!) {\n  customerAccessTokenCreate(input: {email: $email, password: $password}) {\n    customerAccessToken {\n      accessToken\n    }\n  }\n}\n\nmutation deleteCustomerAccessToken($accessToken: String!) {\n  customerAccessTokenDelete(customerAccessToken: $accessToken) {\n    deletedAccessToken\n    userErrors {\n      message\n    }\n  }\n}\n\nquery retrieveCustomer($accessToken: String!) {\n  customer(customerAccessToken: $accessToken) {\n    id\n    email\n    firstName\n    lastName\n  }\n}": types.CreateCustomerDocument,
    "mutation createCart($quantity: Int!, $merchandiseId: ID!) {\n  cartCreate(\n    input: {lines: [{quantity: $quantity, merchandiseId: $merchandiseId}]}\n  ) {\n    cart {\n      id\n      totalQuantity\n      lines(first: 10) {\n        nodes {\n          id\n          quantity\n          cost {\n            totalAmount {\n              amount\n            }\n          }\n          merchandise {\n            ... on ProductVariant {\n              id\n              image {\n                url\n              }\n              price {\n                amount\n              }\n              product {\n                title\n              }\n            }\n          }\n        }\n      }\n      cost {\n        totalAmount {\n          amount\n          currencyCode\n        }\n        subtotalAmount {\n          amount\n          currencyCode\n        }\n        totalTaxAmount {\n          amount\n          currencyCode\n        }\n        totalDutyAmount {\n          amount\n          currencyCode\n        }\n      }\n    }\n  }\n}\n\nmutation addItemToCart($cartId: ID!, $quantity: Int!, $merchandiseId: ID!) {\n  cartLinesAdd(\n    cartId: $cartId\n    lines: [{quantity: $quantity, merchandiseId: $merchandiseId}]\n  ) {\n    cart {\n      id\n      totalQuantity\n      lines(first: 10) {\n        nodes {\n          id\n          quantity\n          cost {\n            totalAmount {\n              amount\n            }\n          }\n          merchandise {\n            ... on ProductVariant {\n              id\n              image {\n                url\n              }\n              price {\n                amount\n              }\n              product {\n                title\n              }\n            }\n          }\n        }\n      }\n      cost {\n        totalAmount {\n          amount\n          currencyCode\n        }\n        subtotalAmount {\n          amount\n          currencyCode\n        }\n        totalTaxAmount {\n          amount\n          currencyCode\n        }\n        totalDutyAmount {\n          amount\n          currencyCode\n        }\n      }\n    }\n  }\n}": types.CreateCartDocument,
    "query homepageCollections {\n  collections(first: 5) {\n    nodes {\n      id\n      title\n      handle\n      image {\n        src\n        altText\n      }\n    }\n  }\n}\n\nquery shopPageQuery {\n  collections(first: 5) {\n    nodes {\n      id\n      title\n      handle\n      products(first: 5) {\n        nodes {\n          id\n          handle\n          title\n          featuredImage {\n            src\n          }\n          priceRange {\n            minVariantPrice {\n              amount\n            }\n          }\n          variants(first: 1) {\n            nodes {\n              id\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nquery categorySlugParams {\n  collections(first: 5) {\n    nodes {\n      handle\n    }\n  }\n}\n\nquery categorySlugCollection($handle: String!) {\n  collectionByHandle(handle: $handle) {\n    id\n    title\n    products(first: 10) {\n      nodes {\n        id\n        handle\n        title\n        featuredImage {\n          src\n        }\n        priceRange {\n          minVariantPrice {\n            amount\n          }\n        }\n        variants(first: 1) {\n          nodes {\n            id\n          }\n        }\n      }\n    }\n  }\n}": types.HomepageCollectionsDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation createCustomer($email: String!, $password: String!, $firstName: String!, $lastName: String!) {\n  customerCreate(\n    input: {email: $email, password: $password, firstName: $firstName, lastName: $lastName}\n  ) {\n    userErrors {\n      message\n    }\n    customer {\n      id\n      email\n      firstName\n      lastName\n    }\n  }\n}\n\nmutation createAccessToken($email: String!, $password: String!) {\n  customerAccessTokenCreate(input: {email: $email, password: $password}) {\n    customerAccessToken {\n      accessToken\n    }\n  }\n}\n\nmutation deleteCustomerAccessToken($accessToken: String!) {\n  customerAccessTokenDelete(customerAccessToken: $accessToken) {\n    deletedAccessToken\n    userErrors {\n      message\n    }\n  }\n}\n\nquery retrieveCustomer($accessToken: String!) {\n  customer(customerAccessToken: $accessToken) {\n    id\n    email\n    firstName\n    lastName\n  }\n}"): (typeof documents)["mutation createCustomer($email: String!, $password: String!, $firstName: String!, $lastName: String!) {\n  customerCreate(\n    input: {email: $email, password: $password, firstName: $firstName, lastName: $lastName}\n  ) {\n    userErrors {\n      message\n    }\n    customer {\n      id\n      email\n      firstName\n      lastName\n    }\n  }\n}\n\nmutation createAccessToken($email: String!, $password: String!) {\n  customerAccessTokenCreate(input: {email: $email, password: $password}) {\n    customerAccessToken {\n      accessToken\n    }\n  }\n}\n\nmutation deleteCustomerAccessToken($accessToken: String!) {\n  customerAccessTokenDelete(customerAccessToken: $accessToken) {\n    deletedAccessToken\n    userErrors {\n      message\n    }\n  }\n}\n\nquery retrieveCustomer($accessToken: String!) {\n  customer(customerAccessToken: $accessToken) {\n    id\n    email\n    firstName\n    lastName\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation createCart($quantity: Int!, $merchandiseId: ID!) {\n  cartCreate(\n    input: {lines: [{quantity: $quantity, merchandiseId: $merchandiseId}]}\n  ) {\n    cart {\n      id\n      totalQuantity\n      lines(first: 10) {\n        nodes {\n          id\n          quantity\n          cost {\n            totalAmount {\n              amount\n            }\n          }\n          merchandise {\n            ... on ProductVariant {\n              id\n              image {\n                url\n              }\n              price {\n                amount\n              }\n              product {\n                title\n              }\n            }\n          }\n        }\n      }\n      cost {\n        totalAmount {\n          amount\n          currencyCode\n        }\n        subtotalAmount {\n          amount\n          currencyCode\n        }\n        totalTaxAmount {\n          amount\n          currencyCode\n        }\n        totalDutyAmount {\n          amount\n          currencyCode\n        }\n      }\n    }\n  }\n}\n\nmutation addItemToCart($cartId: ID!, $quantity: Int!, $merchandiseId: ID!) {\n  cartLinesAdd(\n    cartId: $cartId\n    lines: [{quantity: $quantity, merchandiseId: $merchandiseId}]\n  ) {\n    cart {\n      id\n      totalQuantity\n      lines(first: 10) {\n        nodes {\n          id\n          quantity\n          cost {\n            totalAmount {\n              amount\n            }\n          }\n          merchandise {\n            ... on ProductVariant {\n              id\n              image {\n                url\n              }\n              price {\n                amount\n              }\n              product {\n                title\n              }\n            }\n          }\n        }\n      }\n      cost {\n        totalAmount {\n          amount\n          currencyCode\n        }\n        subtotalAmount {\n          amount\n          currencyCode\n        }\n        totalTaxAmount {\n          amount\n          currencyCode\n        }\n        totalDutyAmount {\n          amount\n          currencyCode\n        }\n      }\n    }\n  }\n}"): (typeof documents)["mutation createCart($quantity: Int!, $merchandiseId: ID!) {\n  cartCreate(\n    input: {lines: [{quantity: $quantity, merchandiseId: $merchandiseId}]}\n  ) {\n    cart {\n      id\n      totalQuantity\n      lines(first: 10) {\n        nodes {\n          id\n          quantity\n          cost {\n            totalAmount {\n              amount\n            }\n          }\n          merchandise {\n            ... on ProductVariant {\n              id\n              image {\n                url\n              }\n              price {\n                amount\n              }\n              product {\n                title\n              }\n            }\n          }\n        }\n      }\n      cost {\n        totalAmount {\n          amount\n          currencyCode\n        }\n        subtotalAmount {\n          amount\n          currencyCode\n        }\n        totalTaxAmount {\n          amount\n          currencyCode\n        }\n        totalDutyAmount {\n          amount\n          currencyCode\n        }\n      }\n    }\n  }\n}\n\nmutation addItemToCart($cartId: ID!, $quantity: Int!, $merchandiseId: ID!) {\n  cartLinesAdd(\n    cartId: $cartId\n    lines: [{quantity: $quantity, merchandiseId: $merchandiseId}]\n  ) {\n    cart {\n      id\n      totalQuantity\n      lines(first: 10) {\n        nodes {\n          id\n          quantity\n          cost {\n            totalAmount {\n              amount\n            }\n          }\n          merchandise {\n            ... on ProductVariant {\n              id\n              image {\n                url\n              }\n              price {\n                amount\n              }\n              product {\n                title\n              }\n            }\n          }\n        }\n      }\n      cost {\n        totalAmount {\n          amount\n          currencyCode\n        }\n        subtotalAmount {\n          amount\n          currencyCode\n        }\n        totalTaxAmount {\n          amount\n          currencyCode\n        }\n        totalDutyAmount {\n          amount\n          currencyCode\n        }\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query homepageCollections {\n  collections(first: 5) {\n    nodes {\n      id\n      title\n      handle\n      image {\n        src\n        altText\n      }\n    }\n  }\n}\n\nquery shopPageQuery {\n  collections(first: 5) {\n    nodes {\n      id\n      title\n      handle\n      products(first: 5) {\n        nodes {\n          id\n          handle\n          title\n          featuredImage {\n            src\n          }\n          priceRange {\n            minVariantPrice {\n              amount\n            }\n          }\n          variants(first: 1) {\n            nodes {\n              id\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nquery categorySlugParams {\n  collections(first: 5) {\n    nodes {\n      handle\n    }\n  }\n}\n\nquery categorySlugCollection($handle: String!) {\n  collectionByHandle(handle: $handle) {\n    id\n    title\n    products(first: 10) {\n      nodes {\n        id\n        handle\n        title\n        featuredImage {\n          src\n        }\n        priceRange {\n          minVariantPrice {\n            amount\n          }\n        }\n        variants(first: 1) {\n          nodes {\n            id\n          }\n        }\n      }\n    }\n  }\n}"): (typeof documents)["query homepageCollections {\n  collections(first: 5) {\n    nodes {\n      id\n      title\n      handle\n      image {\n        src\n        altText\n      }\n    }\n  }\n}\n\nquery shopPageQuery {\n  collections(first: 5) {\n    nodes {\n      id\n      title\n      handle\n      products(first: 5) {\n        nodes {\n          id\n          handle\n          title\n          featuredImage {\n            src\n          }\n          priceRange {\n            minVariantPrice {\n              amount\n            }\n          }\n          variants(first: 1) {\n            nodes {\n              id\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nquery categorySlugParams {\n  collections(first: 5) {\n    nodes {\n      handle\n    }\n  }\n}\n\nquery categorySlugCollection($handle: String!) {\n  collectionByHandle(handle: $handle) {\n    id\n    title\n    products(first: 10) {\n      nodes {\n        id\n        handle\n        title\n        featuredImage {\n          src\n        }\n        priceRange {\n          minVariantPrice {\n            amount\n          }\n        }\n        variants(first: 1) {\n          nodes {\n            id\n          }\n        }\n      }\n    }\n  }\n}"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;